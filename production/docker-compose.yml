version: '3.3'
services:
  eureka-discovery-service:
    image: eureka-discovery-service:0.0.1-SNAPSHOT
    container_name: eureka-discovery-service
    ports: 
      - "8761:8761"
    environment:
      EUREKA_INSTANCE_PREFER_IP_ADDRESS: "true"
  mysql: 
    image: mysql:latest
    container_name: kwetter_account_db
    environment:
      MYSQL_ROOT_PASSWORD: Kw3tter!
      MYSQL_DATABASE: account_db
    volumes:
      - mysql_db_user:/var/lib/mysql  
    ports:
      - "3306:3306"
    restart: always

  mysql_db_auth:
    image: mysql:latest
    container_name: mysql_db_auth
    environment:
      MYSQL_ROOT_PASSWORD: Kw3tter!
      MYSQL_DATABASE: auth_user
    volumes:
      - mysql_db_auth:/var/lib/mysql
    ports:
      - "3307:3307"
    restart: always

  phpmyadmin:
    image: phpmyadmin/phpmyadmin:latest
    container_name: my-php-myadmin
    ports:
      - "8060:80"
    restart: always
        
    depends_on:
      - mysql
    environment:
      PMA_HOST: mysql
      MYSQL_ROOT_PASSWORD: Kw3tter!

  phpmyadmin-auth:
    image: phpmyadmin/phpmyadmin:latest
    container_name: my-php-myadmin-auth
    ports:
      - "8059:80"
    restart: always
            
    depends_on:
      - mysql_db_auth
    environment:
      PMA_HOST: mysql_db_auth
      PMA_PORT: 3308
      PMA_ARBITRARY: 1
      MYSQL_ROOT_PASSWORD: Kw3tter!

  mongodb_timeline:
    image: mongo:latest
    container_name: mongodb_timeline
    environment: 
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: Kw3tter!
    volumes:
      - ./init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
      - mongodb_timeline_container:/data/db
    ports:
      - "27018:27017"
  
  mongodb_follow:
    image: mongo:latest
    container_name: mongodb_follow
    environment: 
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: Kw3tter!
    volumes:
      - ./init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
      - mongodb_follow_container:/data/db
    ports:
      - "27019:27017"

  mongodb_tweet:
    image: mongo:latest
    container_name: mongodb_tweet
    environment: 
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: Kw3tter!
    volumes:
      - ./init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
      - mongodb_tweet_container:/data/db
    ports:
      - "27020:27017"
  
  mongodb_trending:
    image: mongo:latest
    container_name: mongodb_trending
    environment: 
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: Kw3tter!
    volumes:
      - ./init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
      - mongodb_trending_container:/data/db
    ports:
      - "27021:27017"
  
  mongodb_like:
    image: mongo:latest
    container_name: mongodb_like
    environment: 
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: Kw3tter!
    volumes:
      - ./init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
      - mongodb_like_container:/data/db
    ports:
      - "27022:27017"

  like-service:
    image: kwetterfrits/like-service:latest
    hostname: like-service
    restart: always
    ports:
      - "8064:8064"
    
    depends_on: 
      - mongodb_like
      - eureka-discovery-service
    environment:
      SPRING_DATA_MONGODB_HOST: mongodb_like

  trending-service: 
    image: kwetterfrits/trending-service:latest
    hostname: trending-service
    restart: always
    ports:
      - "8065:8065"
        
    depends_on: 
      - mongodb_trending
      - eureka-discovery-service
    environment:
      SPRING_DATA_MONGODB_HOST: mongodb_trending

  follow-service: 
    image: kwetterfrits/follow-service:latest
    hostname: follow-service
    restart: always
    ports:
      - "8066:8066"
    
    depends_on: 
      - mongodb_follow
      - eureka-discovery-service
    environment:
      SPRING_DATA_MONGODB_HOST: mongodb_follow

  auth-service: 
    image: kwetterfrits/auth-service:latest
    hostname: auth-service
    restart: always
    ports:
      - "8067:8067"

    depends_on: 
      - mysql_db_auth
      - eureka-discovery-service
    environment:
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: Kw3tter!
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql_db_auth:3306/auth_user?createDatabaseIfNotExist=true

  timeline-service:
    image: kwetterfrits/timeline-service:latest
    hostname: timeline-service
    restart: always
    ports: 
      - "8068:8068"

    depends_on:
      - mongodb_timeline
      - eureka-discovery-service
      - kafka

    environment: 
      SPRING_DATA_MONGODB_HOST: mongodb_timeline

  user-service:
    image: kwetterfrits/user-service:latest
    hostname: user-service
    restart: always
    ports:
      - "8069:8069"

    depends_on: 
      - mysql
      - eureka-discovery-service
    environment:
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: Kw3tter!
      SPRING_DATASOURCE_URL: jdbc:mysql://kwetter_account_db:3306/account_db?createDatabaseIfNotExist=true

  tweet-service:
    image: kwetterfrits/tweet-service:latest
    hostname: tweet-service
    restart: always
    ports:
      - "8070:8070"

    depends_on: 
      - mongodb_tweet
      - eureka-discovery-service
      - kafka

    environment: 
      SPRING_DATA_MONGODB_HOST: mongodb_tweet
  
  api-gateway:
    image: kwetterfrits/api-gateway:latest
    hostname: api-gateway
    restart: always
    ports:
      - "8050:8050"
    depends_on: 
      - tweet-service
      - user-service
      - timeline-service
      - auth-service
      - eureka-discovery-service
      - like-service
      - trending-service
      - follow-service
    # environment:
    #   SPRING_CLOUD_GATEWAY_ROUTES[0]_URI: http://tweet-service:8070
    #   SPRING_CLOUD_GATEWAY_ROUTES[0]_ID: tweet-service
    #   SPRING_CLOUD_GATEWAY_ROUTES[0]_PREDICATES[0]: Path=/api/tweets/{segment}
    #   SPRING_CLOUD_GATEWAY_ROUTES[0]_PREDICATES[1]: Method=GET, POST, DELETE, PUT, OPTIONS
    #   SPRING_CLOUD_GATEWAY_ROUTES[1]_URI: http://user-service:8069
    #   SPRING_CLOUD_GATEWAY_ROUTES[1]_ID: user-service
    #   SPRING_CLOUD_GATEWAY_ROUTES[1]_PREDICATES[0]: Path=/api/user/{segment}
    #   SPRING_CLOUD_GATEWAY_ROUTES[1]_PREDICATES[1]: Method=GET, POST, DELETE, PUT, OPTIONS
    #   SPRING_CLOUD_GATEWAY_ROUTES[2]_URI: http://timeline-service:8068
    #   SPRING_CLOUD_GATEWAY_ROUTES[2]_ID: timeline-service
    #   SPRING_CLOUD_GATEWAY_ROUTES[2]_PREDICATES[0]: Path=/api/timeline/{segment}
    #   SPRING_CLOUD_GATEWAY_ROUTES[2]_PREDICATES[1]: Method=GET, POST, DELETE, PUT, OPTIONS
    #   SPRING_CLOUD_GATEWAY_ROUTES[3]_URI: http://auth-service:8067
    #   SPRING_CLOUD_GATEWAY_ROUTES[3]_ID: auth-service
    #   SPRING_CLOUD_GATEWAY_ROUTES[3]_PREDICATES[0]: Path=/api/auth/{segment}
    #   SPRING_CLOUD_GATEWAY_ROUTES[4]_URI: http://follow-service:8066
    #   SPRING_CLOUD_GATEWAY_ROUTES[4]_ID: follow-service
    #   SPRING_CLOUD_GATEWAY_ROUTES[4]_PREDICATES[0]: Path=/api/follow/{segment}
    #   SPRING_CLOUD_GATEWAY_ROUTES[5]_URI: http://trending-service:8065
    #   SPRING_CLOUD_GATEWAY_ROUTES[5]_ID: trending-service
    #   SPRING_CLOUD_GATEWAY_ROUTES[5]_PREDICATES[0]: Path=/api/trending/{segment}
    #   SPRING_CLOUD_GATEWAY_ROUTES[6]_URI: http://like-service:8064
    #   SPRING_CLOUD_GATEWAY_ROUTES[6]_ID: like-service
    #   SPRING_CLOUD_GATEWAY_ROUTES[6]_PREDICATES[0]: Path=/api/like/{segment}

  kafdrop:
    image: obsidiandynamics/kafdrop
    restart: "no"
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka:9092"
    depends_on:
      - "kafka"
  zookeeper:
    extends:
      file: kafka.yml
      service: zookeeper
  kafka:
    extends:
      file: kafka.yml
      service: kafka
    
volumes:
  mongodb_like_container:
  mongodb_trending_container:
  mongodb_tweet_container:
  mongodb_timeline_container:
  mongodb_follow_container:
  mysql_db_user:  
  mysql_db_auth: